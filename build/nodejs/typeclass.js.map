{"version":3,"sources":["typeclass.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EAEA,MAA2B,CAAA,SAAA;AAC1B,QAAA;IAAA,SAAA,GAAY;IACZ,GAAA,GAAM;IAEN,SAAA,GAAY,SAAC,SAAD;AACX,UAAA;MAAA,GAAA,4BAAM,GAAI,CAAA,SAAA,IAAJ,GAAI,CAAA,SAAA,IAAc;MACxB,GAAA,kCAAM,SAAU,CAAA,SAAA,IAAV,SAAU,CAAA,SAAA,IAAc;aAC9B;QAAA,WAAA,EAAa,SAAC,CAAD;iBAAO,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAA,IAAkB;QAAzB,CAAb;QACA,KAAA,EAAO,SAAC,KAAD;AACN,cAAA;UAAA,SAAA,GAAY;UACZ,OAAA,CAAQ,SAAA,CAAU,KAAV,CAAR,EAA0B,SAAC,IAAD;AACzB,gBAAA;YAD2B,oBAAU;YACrC,EAAA,2BAAK,GAAI,CAAA,QAAA,IAAJ,GAAI,CAAA,QAAA,IAAa;YACtB,CAAA,GAAI,SAAC,GAAD;AACH,kBAAA;cAAA,IAAO,WAAP;AACC,sBAAM,SAAA,CAAU,iBAAA,GAAkB,SAAlB,GAA4B,OAA5B,GAAmC,QAAnC,GAA4C,GAA5C,GAA+C,GAA/C,GAAmD,SAAnD,GAA4D,GAAtE,EADP;;AAEA,mBAAA,oCAAA;6BAAK,eAAM;gBAEV,IAAG,GAAG,CAAC,WAAJ,KAAmB,IAAtB;AACC,yBAAO,QAAA,CAAS,GAAT,EADR;;AAFD;cAIA,IAAG,mBAAH;AACC,uBAAO,WAAW,CAAC,IAAZ,CAAiB,SAAjB,EAA4B,GAA5B,EADR;eAAA,MAAA;AAGC,sBAAM,SAAA,CAAU,iBAAA,GAAkB,SAAlB,GAA4B,OAA5B,GAAmC,QAAnC,GAA4C,GAA5C,GAA+C,GAA/C,GAAmD,SAAnD,GAA2D,CAAC,GAAG,CAAC,WAAW,CAAC,IAAhB,IAAwB,aAAzB,CAArE,EAHP;;YAPG;mBAWJ,SAAU,CAAA,QAAA,CAAV,GAAsB;UAbG,CAA1B;AAcA,iBAAO;QAhBD,CADP;;IAHW;IAsBZ,QAAA,GAAW,SAAC,SAAD;AACV,UAAA;MAAA,GAAA,4BAAM,GAAI,CAAA,SAAA,IAAJ,GAAI,CAAA,SAAA,IAAc;MACxB,GAAA,kCAAM,SAAU,CAAA,SAAA,IAAV,SAAU,CAAA,SAAA,IAAc;aAC9B,SAAC,IAAD;QAEC,IAAkB,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAA,GAAoB,CAAtC;UAAA,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAA;;eACA;UAAA,KAAA,EAAO,SAAC,QAAD;mBACN,OAAA,CAAS,SAAA,CAAU,QAAV,CAAT,EAA8B,SAAC,IAAD;AAC7B,kBAAA;cAD+B,oBAAU;qBACzC,yBAAC,GAAI,CAAA,QAAA,IAAJ,GAAI,CAAA,QAAA,IAAa,EAAlB,CAAqB,CAAC,IAAtB,CAA2B,CAAC,IAAD,EAAO,QAAP,CAA3B;YAD6B,CAA9B;UADM,CAAP;;MAHD;IAHU;AAUX,WAAO;MAAC,WAAA,SAAD;MAAY,UAAA,QAAZ;;EApCmB,CAAA,CAAH,CAAA,CAAxB,EAAC,gBAAA,SAAD,EAAY,eAAA;;EAsCZ,MAAM,CAAC,OAAP,GAAiB;IAAC,WAAA,SAAD;IAAY,UAAA,QAAZ;;;EAEjB,IAAG,MAAM,CAAC,MAAP,KAAiB,IAApB;IACE,OAAQ,SAAA,CAAU,MAAV,CAAiB,CAAC,KAAlB,CACR;MAAA,IAAA,EAAM,SAAC,CAAD;eAAO,GAAA,CAAI,IAAC,CAAA,IAAD,CAAM,CAAN,CAAJ;MAAP,CAAN;MACA,IAAA,EAAM,SAAA;eAAG;MAAH,CADN;KADQ,EAAR;IAID,QAAA,CAAS,MAAT,CAAA,CAAiB,MAAjB,CAAwB,CAAC,KAAzB,CACC;MAAA,IAAA,EAAM,SAAC,CAAD;eAAO,IAAA,CAAK,CAAL;MAAP,CAAN;KADD;IAGA,QAAA,CAAS,MAAT,CAAA,CAAiB,MAAjB,CAAwB,CAAC,KAAzB,CAA+B,EAA/B;IAEA,GAAA,CAAI,SAAA;aAAG,IAAA,CAAK,OAAL;IAAH,CAAJ;IACA,GAAA,CAAI,SAAA;aAAG,IAAA,CAAK,CAAL;IAAH,CAAJ;IACA,GAAA,CAAI,SAAA;aAAG,SAAA,CAAU,MAAV,CAAiB,CAAC,WAAlB,CAA8B,MAA9B;IAAH,CAAJ;IACA,GAAA,CAAI,SAAA;aAAG,SAAA,CAAU,MAAV,CAAiB,CAAC,WAAlB,CAA8B,MAA9B;IAAH,CAAJ;IACA,GAAA,CAAI,SAAA;aAAG,SAAA,CAAU,MAAV,CAAiB,CAAC,WAAlB,CAA8B,MAA9B;IAAH,CAAJ,EAdD;;AA1CA","file":"typeclass.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n\n{typeclass, instance} = do ->\n\tinstances = {}\n\treg = {}\n\n\ttypeclass = (classname) ->\n\t\tcls = reg[classname] ?= {}\n\t\tins = instances[classname] ?= []\n\t\thasInstance: (t) -> ins.indexOf(t) >= 0\n\t\twhere: (funcs) ->\n\t\t\trst_funcs = {}\n\t\t\tforeach enumerate(funcs), ([funcname, funcdefault]) ->\n\t\t\t\tls = cls[funcname] ?= []\n\t\t\t\tf = (arg) ->\n\t\t\t\t\tunless arg?\n\t\t\t\t\t\tthrow TypeError \"No Instance of #{classname}(via #{funcname}(#{arg})) For #{arg}\"\n\t\t\t\t\tfor [type, funcbody] in ls\n\t\t\t\t\t\t#log -> type\n\t\t\t\t\t\tif arg.constructor is type\n\t\t\t\t\t\t\treturn funcbody(arg)\n\t\t\t\t\tif funcdefault?\n\t\t\t\t\t\treturn funcdefault.call(rst_funcs, arg)\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow TypeError \"No Instance of #{classname}(via #{funcname}(#{arg})) For #{arg.constructor.name or 'UnnamedType'}\"\n\t\t\t\trst_funcs[funcname] = f\n\t\t\treturn rst_funcs\n\n\tinstance = (classname) ->\n\t\tcls = reg[classname] ?= {}\n\t\tins = instances[classname] ?= []\n\t\t(type) ->\n\t\t\t#log -> type\n\t\t\tins.push(type) if ins.indexOf(type) < 0\n\t\t\twhere: (funcdict) ->\n\t\t\t\tforeach (enumerate funcdict), ([funcname, funcbody]) ->\n\t\t\t\t\t(cls[funcname] ?= []).push [type, funcbody]\n\n\treturn {typeclass, instance}\n\nmodule.exports = {typeclass, instance}\n\nif module.parent is null\n\t{show} = typeclass('Show').where\n\t\tshow: (x) -> str @zero(x)\n\t\tzero: -> 0\n\n\tinstance('Show')(String).where\n\t\tshow: (s) -> json s\n\n\tinstance('Show')(Number).where {}\n\n\tlog -> show \"hello\"\n\tlog -> show 1\n\tlog -> typeclass('Show').hasInstance(String)\n\tlog -> typeclass('Show').hasInstance(Number)\n\tlog -> typeclass('Show').hasInstance(Object)\n\t#log -> show null\n\t#log -> show 0\n\t#log -> show {x: 1}\n"]}