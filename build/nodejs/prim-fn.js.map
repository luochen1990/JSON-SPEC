{"version":3,"sources":["prim-fn.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACA,MAAwB,OAAA,CAAQ,aAAR,CAAxB,EAAC,gBAAA,SAAD,EAAY,eAAA;;EACZ,OAAwD,OAAA,CAAQ,YAAR,CAAxD,EAAC,aAAA,KAAD,EAAQ,YAAA,IAAR,EAAc,eAAA,OAAd,EAAuB,cAAA,MAAvB,EAA+B,kBAAA,UAA/B,EAA2C,iBAAA;;EAC1C,eAAgB,OAAA,CAAQ,WAAR,EAAhB;;EAEK;IACQ,YAAC,KAAD;MACZ,MAAA,CAAO,SAAA;eAAG,SAAA,CAAU,UAAV,CAAqB,CAAC,WAAtB,CAAkC,KAAK,CAAC,WAAxC;MAAH,CAAP;AACA,aAAO,SAAC,KAAD;QACN,MAAA,CAAO,SAAA;iBAAG,SAAA,CAAU,UAAV,CAAqB,CAAC,WAAtB,CAAkC,KAAK,CAAC,WAAxC;QAAH,CAAP;eACA;UAAA,WAAA,EAAa,EAAb;UACA,KAAA,EAAO,KADP;UAEA,KAAA,EAAO,KAFP;;MAFM;IAFK;;;;;;EAQd,QAAA,CAAS,UAAT,CAAA,CAAqB,EAArB,CAAwB,CAAC,KAAzB,CACC;IAAA,KAAA,EAAO,SAAC,GAAD;AAAoB,UAAA;MAAlB,YAAA,OAAO,YAAA;aAAW,SAAC,CAAD;eAC1B,WAAA,IAAO,CAAC,CAAC,WAAF,KAAiB;MADE;IAApB,CAAP;IAEA,QAAA,EAAU,SAAC,GAAD;AAAoB,UAAA;MAAlB,YAAA,OAAO,YAAA;aAAW,SAAC,CAAD;QAC7B,IAAG,CAAI,CAAC,WAAA,IAAO,CAAC,CAAC,WAAF,KAAiB,QAAzB,CAAP;AACC,gBAAM,SAAA,CAAU;YAAC,QAAA,EAAU,UAAX;YAAuB,GAAA,EAAK,CAA5B;WAAV,EADP;SAAA,MAAA;AAGC,iBAAO,SAAC,CAAD;AACN,gBAAA;YAAA,QAAA,CAAS,KAAT,CAAA,CAAgB,CAAhB;YACA,CAAA,GAAI,CAAA,CAAE,CAAF;YACJ,QAAA,CAAS,KAAT,CAAA,CAAgB,CAAhB;AACA,mBAAO;UAJD,EAHR;;MAD6B;IAApB,CAFV;IAWA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,YAAA,OAAO,YAAA;aACZ,CAAC,IAAA,CAAK,KAAL,CAAD,CAAA,GAAY,MAAZ,GAAiB,CAAC,IAAA,CAAK,KAAL,CAAD;IADd,CAXN;IAaA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,YAAA,OAAO,YAAA;aACjB,MAAA,CAAO;QAAC,SAAA,EAAY,MAAA,CAAO,KAAP,CAAb;QAA4B,UAAA,EAAa,MAAA,CAAO,KAAP,CAAzC;OAAP;IADQ,CAbT;IAeA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,YAAA,OAAO,YAAA;aACpB,qCAAA,GAAqC,CAAC,UAAA,CAAW,KAAX,CAAD,CAArC,GAAuD,MAAvD,GAA4D,CAAC,UAAA,CAAW,KAAX,CAAD,CAA5D,GAA8E;IADnE,CAfZ;IAiBA,SAAA,EAAW,SAAC,GAAD;AACV,UAAA;MADY,YAAA,OAAO,YAAA;aACnB;QAAA,IAAA,EAAM,4CAAN;QACA,IAAA,EAAM,YAAA,CAAa,UAAb,EAAyB,YAAzB,CAAA,CAAuC;UAAC,KAAA,EAAO,KAAR;UAAe,MAAA,EAAQ,KAAvB;SAAvC,CADN;QAEA,IAAA,EAAM,mCAFN;;IADU,CAjBX;GADD;;EAuBA,MAAM,CAAC,OAAP,GAAiB;IAAC,IAAA,EAAD;;AArCjB","file":"prim-fn.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require './typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require './typespec'\n{genBlockBody} = require './helpers'\n\nclass Fn\n\tconstructor: (ispec) ->\n\t\tassert -> typeclass('TypeSpec').hasInstance(ispec.constructor)\n\t\treturn (ospec) ->\n\t\t\tassert -> typeclass('TypeSpec').hasInstance(ospec.constructor)\n\t\t\tconstructor: Fn\n\t\t\tispec: ispec\n\t\t\tospec: ospec\n\ninstance('TypeSpec')(Fn).where\n\tmatch: ({ispec, ospec}) -> (v) ->\n\t\tv? and v.constructor is Function #TODO: how to be precise ?\n\twithSpec: ({ispec, ospec}) -> (v) ->\n\t\tif not (v? and v.constructor is Function)\n\t\t\tthrow TypeError {expected: 'Function', got: v}\n\t\telse\n\t\t\treturn (x) ->\n\t\t\t\twithSpec(ispec)(x)\n\t\t\t\ty = v(x)\n\t\t\t\twithSpec(ospec)(y)\n\t\t\t\treturn y\n\tshow: ({ispec, ospec}) ->\n\t\t\"#{show ispec} -> #{show ospec}\" #TODO: what about (a -> b) -> c ?\n\tsamples: ({ispec, ospec}) ->\n\t\trepeat {\"[input]\": (sample ispec), \"[output]\": (sample ospec)}\n\thtmlInline: ({ispec, ospec}) ->\n\t\t\"<span class='type-maker unwrapped'>#{htmlInline ispec} -> #{htmlInline ospec}</span>\"\n\thtmlBlock: ({ispec, ospec}) ->\n\t\thead: \"<span class='type-maker'>Function (</span>\"\n\t\tbody: genBlockBody('function', 'meta-field') {input: ispec, output: ospec}\n\t\ttail: \"<span class='type-maker'>)</span>\"\n\nmodule.exports = {Fn}\n"]}