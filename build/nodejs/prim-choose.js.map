{"version":3,"sources":["prim-choose.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACA,MAAwB,OAAA,CAAQ,aAAR,CAAxB,EAAC,gBAAA,SAAD,EAAY,eAAA;;EACZ,OAAwD,OAAA,CAAQ,YAAR,CAAxD,EAAC,aAAA,KAAD,EAAQ,YAAA,IAAR,EAAc,eAAA,OAAd,EAAuB,cAAA,MAAvB,EAA+B,kBAAA,UAA/B,EAA2C,iBAAA;;EAC1C,eAAgB,OAAA,CAAQ,WAAR,EAAhB;;EAEK;IACQ,gBAAC,KAAD;MACZ,MAAA,CAAO,SAAA;eAAG,eAAA,IAAW,KAAK,CAAC,WAAN,KAAqB;MAAnC,CAAP;MACA,MAAA,CAAO,SAAA;eAAG,GAAA,CAAI,SAAC,CAAD;iBAAO,WAAA,IAAO,SAAA,CAAU,UAAV,CAAqB,CAAC,WAAtB,CAAkC,CAAC,CAAC,WAApC;QAAd,CAAJ,CAAA,CAAoE,KAApE;MAAH,CAAP;AACA,aAAO;QACN,WAAA,EAAa,MADP;QAEN,KAAA,EAAO,KAFD;;IAHK;;;;;;EAQd,QAAA,CAAS,UAAT,CAAA,CAAqB,MAArB,CAA4B,CAAC,KAA7B,CACC;IAAA,KAAA,EAAO,SAAC,GAAD;AAAa,UAAA;MAAX,QAAD,IAAC;aAAW,SAAC,CAAD;eACnB,WAAA,IAAO,GAAA,CAAI,KAAA,CAAM,IAAN,CAAA,CAAY,CAAZ,CAAJ;MADY;IAAb,CAAP;IAEA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,QAAD,IAAC;aACP,CAAC,IAAA,CAAK,GAAA,CAAI,IAAJ,CAAA,CAAU,KAAV,CAAL,CAAD,CAAsB,CAAC,IAAvB,CAA4B,KAA5B;IADK,CAFN;IAIA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,QAAD,IAAC;aACV,MAAA,CAAO,MAAA,CAAO,GAAA,CAAI,MAAJ,CAAA,CAAY,KAAZ,CAAP,CAAP;IADQ,CAJT;IAMA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,QAAD,IAAC;aACb,qCAAA,GAAqC,CAAC,CAAC,IAAA,CAAK,GAAA,CAAI,UAAJ,CAAA,CAAgB,KAAhB,CAAL,CAAD,CAA4B,CAAC,IAA7B,CAAkC,KAAlC,CAAD,CAArC,GAA+E;IADpE,CANZ;IAQA,SAAA,EAAW,SAAC,GAAD;AAEV,UAAA;MAFY,QAAD,IAAC;aAEZ;QAAA,IAAA,EAAM,0CAAN;QACA,IAAA,EAAM,YAAA,CAAa,QAAb,EAAuB,YAAvB,CAAA,CAAqC,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,QAAJ,EAAc,KAAd,CAAL,CAAL,CAArC,CADN;QAEA,IAAA,EAAM,mCAFN;;IAFU,CARX;GADD;;EAeA,MAAM,CAAC,OAAP,GAAiB;IAAC,QAAA,MAAD;;AA7BjB","file":"prim-choose.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require './typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require './typespec'\n{genBlockBody} = require './helpers'\n\nclass Choose\n\tconstructor: (specs) ->\n\t\tassert -> specs? and specs.constructor is Array\n\t\tassert -> all((x) -> x? and typeclass('TypeSpec').hasInstance(x.constructor))(specs)\n\t\treturn {\n\t\t\tconstructor: Choose\n\t\t\tspecs: specs\n\t\t}\n\ninstance('TypeSpec')(Choose).where\n\tmatch: ({specs}) -> (v) ->\n\t\tv? and all(match(spec) v)\n\tshow: ({specs}) ->\n\t\t(list map(show) specs).join(' | ')\n\tsamples: ({specs}) ->\n\t\tconcat repeat map(sample)(specs)\n\thtmlInline: ({specs}) ->\n\t\t\"<span class='type-maker unwrapped'>#{(list map(htmlInline) specs).join(' | ')}</span>\"\n\thtmlBlock: ({specs}) ->\n\t\t#log -> (list zip(repeat('-'), specs))\n\t\thead: \"<span class='type-maker'>Choose [</span>\"\n\t\tbody: genBlockBody('choose', 'meta-field')(dict list zip(naturals, specs))\n\t\ttail: \"<span class='type-maker'>]</span>\"\n\nmodule.exports = {Choose}\n"]}