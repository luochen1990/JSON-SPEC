{"version":3,"sources":["prim-namedtype.coffee"],"names":[],"mappings":"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","file":"prim-namedtype.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require './typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require './typespec'\n{expandBlockHead} = require './helpers'\n\nclass NamedType\n\tconstructor: ({name, spec, desc, check, samples}) ->\n\t\tif not name? or not spec?\n\t\t\tthrow Error 'name & spec must be specified for a NamedType declaration'\n\t\tassert -> typeclass('TypeSpec').hasInstance(spec.constructor)\n\n\t\tif samples? and not all(match(spec))(take(100) samples)\n\t\t\tlog -> name\n\t\t\tlog -> spec\n\t\t\tlog -> samples\n\t\t\tlog -> match(spec) samples[0]\n\t\t\tthrow TypeError 'bad samples'\n\n\t\treturn {\n\t\t\tconstructor: NamedType\n\t\t\tname\n\t\t\tspec\n\t\t\tdesc\n\t\t\tcheck\n\t\t\tsamples\n\t\t}\n\ninstance('TypeSpec')(NamedType).where\n\tmatch: ({spec, check}) -> (v) ->\n\t\tmatch(spec)(v) and (if check? then check(v) else true)\n\tshow: ({name, spec}) ->\n\t\tname or (show spec)\n\tsamples: ({spec, samples: ls}) ->\n\t\tif ls? then concat repeat ls else samples spec\n\thtmlInline: ({name, spec}) ->\n\t\tif name? then \"<span class='type-name'>#{name}</span>\" else htmlInline spec\n\thtmlBlock: ({name, spec}) ->\n\t\texpandBlockHead((head) ->\n\t\t\t\"<span><span class='type-name'>#{name}</span><span class='spliter'>spec:</span>#{head}</span>\"\n\t\t)(spec) ? {\n\t\t\thead: \"<span><span class='type-name'>#{name}</span><span class='spliter'>spec:</span>#{htmlInline spec}</span>\"\n\t\t}\n\tshowHtml: (t) ->\n\t\t{name, desc, spec, check} = t\n\n\t\tnamePart = if not name? then '' else \"\"\"\n\t\t\t<div class='name'>\n\t\t\t<span class='meta-field'>name</span>: <span class='type-name'>#{name}</span>\n\t\t\t</div>\n\t\t\t\"\"\"\n\n\t\tdescriptionPart = if not desc? then '' else do ->\n\t\t\ts = desc\n\t\t\treturn \"\"\"\n\t\t\t<div class='desc'>\n\t\t\t<span class='meta-field'>desc</span>: #{\n\t\t\t\tif /\\n/.test s then \"<pre class='text'>#{s}</pre>\" else \"<span class='text'>#{s}</span>\"\n\t\t\t}\n\t\t\t</div>\n\t\t\t\"\"\"\n\n\t\tspecPart = do ->\n\t\t\tblock = htmlBlock spec\n\t\t\treturn \"\"\"\n\t\t\t<div class='spec'>\n\t\t\t<div class='#{if block? then 'fold' else 'inline'}'><span class='meta-field'>spec</span>: #{htmlInline spec}</div>\n\t\t\t#{if block? then (\n\t\t\t\t\"\"\"\n\t\t\t\t<div class='unfold'>\n\t\t\t\t\t<span class='meta-field'>spec</span>: #{block.head}\n\t\t\t\t\t#{block.body ? ''}\n\t\t\t\t\t#{block.tail ? ''}\n\t\t\t\t</div>\n\t\t\t\t\"\"\"\n\t\t\t) else ''}\n\t\t\t</div>\n\t\t\t\"\"\".replace(/(\\t|\\n)/g, '')\n\n\t\tsamplePart = do ->\n\t\t\ts = json(sample(t), 4)\n\t\t\treturn \"\"\"\n\t\t\t<div class='sample'>\n\t\t\t<span class='meta-field'>sample</span>: #{\n\t\t\t\tif /\\n/.test s then \"<pre class='code'>#{s}</pre>\" else \"<span class='code'>#{s}</span>\"\n\t\t\t}\n\t\t\t</div>\n\t\t\t\"\"\"\n\n\t\tcheckPart = if not check? then '' else do ->\n\t\t\ts = check.toString()\n\t\t\treturn \"\"\"\n\t\t\t<div class='check'>\n\t\t\t<span class='meta-field'>constraint</span>: #{\n\t\t\t\tif /\\n/.test s then \"<pre class='code'>#{s}</pre>\" else \"<span class='code'>#{s}</span>\"\n\t\t\t}\n\t\t\t</div>\n\t\t\t\"\"\"\n\n\t\treturn \"<div class='typespec'>#{ namePart + descriptionPart + specPart + samplePart + checkPart }</div>\"\n\nmodule.exports = {NamedType}\n"]}