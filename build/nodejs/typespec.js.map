{"version":3,"sources":["typespec.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACC,YAAa,OAAA,CAAQ,aAAR,EAAb;;EAGD,QAAA,GAAW,SAAA,CAAU,UAAV,CAAqB,CAAC,KAAtB,CACV;IAAA,KAAA,EAAO,IAAP;IACA,QAAA,EAAU,SAAC,CAAD;aAAO,SAAC,CAAD;QAChB,IAAG,CAAI,IAAC,CAAA,KAAD,CAAO,CAAP,CAAA,CAAU,CAAV,CAAP;AACC,gBAAM,SAAA,CAAU;YAAC,QAAA,EAAU,IAAC,CAAA,IAAD,CAAM,CAAN,CAAX;YAAqB,GAAA,EAAK,CAA1B;WAAV,EADP;SAAA,MAAA;AAGC,iBAAO,EAHR;;MADgB;IAAP,CADV;IAMA,IAAA,EAAM,SAAC,CAAD;aACL,CAAC,CAAC,IAAF,IAAU;IADL,CANN;IAQA,OAAA,EAAS,IART;IASA,MAAA,EAAQ,SAAC,CAAD;aAAO,IAAA,CAAK,IAAC,CAAA,OAAD,CAAS,CAAT,CAAL;IAAP,CATR;IAUA,UAAA,EAAY,SAAC,CAAD;aACX,2BAAA,GAA2B,CAAC,IAAC,CAAA,IAAD,CAAM,CAAN,CAAD,CAA3B,GAAoC;IADzB,CAVZ;IAYA,SAAA,EAAW,SAAC,CAAD;aAAO;IAAP,CAZX;IAaA,QAAA,EAAU,SAAC,CAAD;AACT,UAAA;MAAA,QAAA,GAAc,CAAA,SAAA,KAAA;eAAA,SAAA;AACb,cAAA;UAAA,KAAA,GAAQ,KAAC,CAAA,SAAD,CAAW,CAAX;AACR,iBAAO,CAAA,kCAAA,GAEM,CAAI,aAAH,GAAe,MAAf,GAA2B,QAA5B,CAFN,GAE2C,0CAF3C,GAEoF,CAAC,KAAC,CAAA,UAAD,CAAY,CAAZ,CAAD,CAFpF,GAEmG,UAFnG,GAGN,CAAI,aAAH,GACD,+DAAA,GAEyC,KAAK,CAAC,IAF/C,GAEoD,KAFpD,GAGE,oCAAc,EAAd,CAHF,GAGmB,KAHnB,GAIE,sCAAc,EAAd,CAJF,GAImB,UALlB,GAQK,EARN,CAHM,GAWG,UAXH,CAaJ,CAAC,OAbG,CAaK,UAbL,EAaiB,EAbjB;QAFM;MAAA,CAAA,CAAA,CAAA,IAAA,CAAH,CAAA;MAiBX,UAAA,GAAgB,CAAA,SAAA,KAAA;eAAA,SAAA;AACf,cAAA;UAAA,CAAA,GAAI,IAAA,CAAK,KAAC,CAAA,MAAD,CAAQ,CAAR,CAAL,EAAiB,CAAjB;AACJ,iBAAO,gEAAA,GAEkC,CACrC,IAAI,CAAC,IAAL,CAAU,CAAV,CAAH,GAAoB,oBAAA,GAAqB,CAArB,GAAuB,QAA3C,GAAwD,qBAAA,GAAsB,CAAtB,GAAwB,SADxC,CAFlC,GAIN;QANc;MAAA,CAAA,CAAA,CAAA,IAAA,CAAH,CAAA;AAUb,aAAO,wBAAA,GAAwB,CAAC,QAAA,GAAW,UAAZ,CAAxB,GAA+C;IA5B7C,CAbV;GADU;;EA4CX,MAAM,CAAC,OAAP,GAAiB;AAhDjB","file":"typespec.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass} = require './typeclass'\n#{Data} = require './index'\n\nTypeSpec = typeclass('TypeSpec').where\n\tmatch: null\n\twithSpec: (t) -> (v) ->\n\t\tif not @match(t)(v)\n\t\t\tthrow TypeError {expected: @show(t), got: v}\n\t\telse\n\t\t\treturn v\n\tshow: (t) ->\n\t\tt.name or 'UnnamedType'\n\tsamples: null\n\tsample: (t) -> head @samples(t)\n\thtmlInline: (t) ->\n\t\t\"<span class='type-maker'>#{@show t}</span>\"\n\thtmlBlock: (t) -> null\n\tshowHtml: (t) ->\n\t\tspecPart = do =>\n\t\t\tblock = @htmlBlock t\n\t\t\treturn \"\"\"\n\t\t\t<div class='spec'>\n\t\t\t<div class='#{if block? then 'fold' else 'inline'}'><span class='meta-field'>spec</span>: #{@htmlInline t}</div>\n\t\t\t#{if block? then (\n\t\t\t\t\"\"\"\n\t\t\t\t<div class='unfold'>\n\t\t\t\t\t<span class='meta-field'>spec</span>: #{block.head}\n\t\t\t\t\t#{block.body ? ''}\n\t\t\t\t\t#{block.tail ? ''}\n\t\t\t\t</div>\n\t\t\t\t\"\"\"\n\t\t\t) else ''}\n\t\t\t</div>\n\t\t\t\"\"\".replace(/(\\t|\\n)/g, '')\n\n\t\tsamplePart = do =>\n\t\t\ts = json(@sample(t), 4)\n\t\t\treturn \"\"\"\n\t\t\t<div class='sample'>\n\t\t\t<span class='meta-field'>sample</span>: #{\n\t\t\t\tif /\\n/.test s then \"<pre class='code'>#{s}</pre>\" else \"<span class='code'>#{s}</span>\"\n\t\t\t}\n\t\t\t</div>\n\t\t\t\"\"\"\n\n\t\treturn \"<div class='typespec'>#{specPart + samplePart}</div>\"\n\nmodule.exports = TypeSpec\n\n"]}