{"version":3,"sources":["typespec.coffee"],"names":[],"mappings":"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","file":"typespec.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass} = require './typeclass'\n{Any} = require './prim/Any'\n#{Data} = require './index'\n\nTypeSpec = typeclass('TypeSpec').where\n\tmatch: null\n\tshape: (t) -> Any\n\tconstraints: null\n\twithSpec: (t) -> (v) ->\n\t\tif not @match(t)(v)\n\t\t\tthrow TypeError {expected: @show(t), got: v}\n\t\telse\n\t\t\treturn v\n\tshow: (t) ->\n\t\tt.name or 'UnnamedType'\n\tsamples: null\n\tsample: (t) -> head @samples(t)\n\thtmlInline: (t) ->\n\t\t\"<span class='type-maker'>#{@show t}</span>\"\n\thtmlBlock: (t) -> null\n\tshowHtml: (t) ->\n\t\tspecPart = do =>\n\t\t\tblock = @htmlBlock t\n\t\t\treturn \"\"\"\n\t\t\t<div class='spec'>\n\t\t\t<div class='#{if block? then 'fold' else 'inline'}'><span class='meta-field'>spec</span>: #{@htmlInline t}</div>\n\t\t\t#{if block? then (\n\t\t\t\t\"\"\"\n\t\t\t\t<div class='unfold'>\n\t\t\t\t\t<span class='meta-field'>spec</span>: #{block.head}\n\t\t\t\t\t#{block.body ? ''}\n\t\t\t\t\t#{block.tail ? ''}\n\t\t\t\t</div>\n\t\t\t\t\"\"\"\n\t\t\t) else ''}\n\t\t\t</div>\n\t\t\t\"\"\".replace(/(\\t|\\n)/g, '')\n\n\t\tsamplePart = do =>\n\t\t\ts = json(@sample(t), 4)\n\t\t\treturn \"\"\"\n\t\t\t<div class='sample'>\n\t\t\t<span class='meta-field'>sample</span>: #{\n\t\t\t\tif /\\n/.test s then \"<pre class='code'>#{s}</pre>\" else \"<span class='code'>#{s}</span>\"\n\t\t\t}\n\t\t\t</div>\n\t\t\t\"\"\"\n\n\t\treturn \"<div class='typespec'>#{specPart + samplePart}</div>\"\n\nconstraints = TypeSpec.constraints\nunmatchMessages = (spec) -> (v) ->\n\tr = []\n\trec = (ls) ->\n\t\trst = true\n\t\tforeach ls, ({label, flag, sub}) ->\n\t\t\tif flag?\n\t\t\t\tif flag() is false\n\t\t\t\t\tr.push label()\n\t\t\t\t\trst = false\n\t\t\t\t\tforeach.break\n\t\t\telse if sub?\n\t\t\t\tif rec(sub()) is false\n\t\t\t\t\tr.push label()\n\t\t\t\t\trst = false\n\t\t\t\t\tforeach.break\n\t\treturn rst\n\trec(constraints(spec)(v))\n\treturn r\n\nmodule.exports = extend({unmatchMessages})(TypeSpec)\n\n"]}