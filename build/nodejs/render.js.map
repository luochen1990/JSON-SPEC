{"version":3,"sources":["render.coffee"],"names":[],"mappings":"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","file":"render.js","sourceRoot":"/source/","sourcesContent":["{match, show, sample, samples, showHtml, htmlInline, htmlBlock} = require './typespec'\n\nstyle = \"\"\"\n\t.typespec {\n\t\tfont-family: monospace;\n\t\tfont-size: 16px;\n\t\tborder-width: 4px;\n\t\tborder-color: rgba(165, 230, 229, 0.24);\n\t\tborder-style: ridge;\n\t}\n\t.typespec>div, .typespec>pre {\n\t\tmargin: 0.6em\n\t}\n\t.typespec .unfolded>.fold, .typespec .folded>.unfold {\n\t\tdisplay: none\n\t}\n\t.typespec ul {\n\t\tlist-style-type: none;\n\t\tpadding: 0px;\n\t\tmargin: 0px 0px 0px 2em;\n\t}\n\t.typespec .meta-field {\n\t\tcolor: gray;\n\t}\n\t.typespec .field-name {\n\t\tfont-weight: bold;\n\t\tcolor: #87BFB8\n\t}\n\t.typespec .type-name {\n\t\tcolor: blue;\n\t}\n\t.typespec .spec .type-name {\n\t\tcursor: pointer\n\t}\n\t.typespec .type-maker {\n\t\tcolor: #223497\n\t}\n\t.typespec .type-maker.unwrapped>.unwrapped:before {\n\t\tcontent: '('\n\t}\n\t.typespec .type-maker.unwrapped>.unwrapped:after {\n\t\tcontent: ')'\n\t}\n\t.typespec .spliter {\n\t\tcolor: gray;\n\t\tpadding: 0 0.5em\n\t}\n\t.typespec .sample pre {\n\t\tmargin: 0;\n\t\tcolor: green;\n\t\tmax-height: 20em;\n\t\toverflow: auto;\n\t}\n\t.typespec .spec {\n\t\tcursor: default\n\t}\n\t.typespec .spec li:hover {\n\t\ttransition: 1s;\n\t\tbackground-color: rgba(140, 150, 255, 0.12)\n\t}\n\t.typespec .spec .type-name:hover, .typespec .spec .folded-detail:hover, .typespec .fold>.field-name:hover, .typespec .unfold>.field-name:hover, .typespec .fold>.meta-field:hover, .typespec .unfold>.meta-field:hover {\n\t\topacity: 0.6\n\t}\n\"\"\"\n\nbind = ($) -> (rootSelection) ->\n\t#console.info rootSelection.find('ul')\n\trootSelection.find('.unfold').each (i, elm) ->\n\t\t$(elm).closest('li,.spec').addClass('unfolded').removeClass('folded')\n\trootSelection.find('.type-name, .choose').each (i, elm) ->\n\t\t$(elm).closest('li').addClass('folded').removeClass('unfolded')\n\trootSelection.find('.type-name, .folded-detail, .fold>.field-name, .unfold>.field-name, .fold>.meta-field, .unfold>.meta-field').each (i, elm) ->\n\t\tif (e = $(elm).closest('li,.spec')).length > 0\n\t\t\t$(elm).css(cursor: 'pointer').click ->\n\t\t\t\te.toggleClass('folded').toggleClass('unfolded')\n\t#rootSelection.find('li').each (i, elm) ->\n\t#\t$(elm).children('.unfold').children('.field-name,.meta-field').click ->\n\t#\t\t$(elm).addClass('folded').removeClass('unfolded')\n\t#\t$(elm).children('.fold').children('.field-name,.meta-field').click ->\n\t#\t\t$(elm).addClass('unfolded').removeClass('folded')\n\nshowPage = (t) ->\n\t\"\"\"\n\t<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />\n\t<style>#{style}</style>\n\t#{showHtml t}\n\t<script src='http://libs.baidu.com/jquery/1.9.0/jquery.js'></script>\n\t<script>(#{bind.toString()})(jQuery)($('.typespec'))</script>\n\t\"\"\"\n\ninit = ($) -> (bind, specs, style) ->\n\t$('head').append(\"<style>#{style}</style>\")\n\t$('.typespec-hook').each (i, elm) ->\n\t\t$(elm).append(specs[$(elm).attr('it')])\n\tbind($('.typespec'))\n\ngenRenderCode = (entries) ->\n\tspecs = json dict list map(([k, v]) -> [k, (showHtml v)]) enumerate(entries)\n\t\"(#{init.toString()})(jQuery)((#{bind})(jQuery), #{specs}, #{json style})\"\n\nmodule.exports = {\n\tshowPage, genRenderCode\n}\n\nif module.parent is null\n\trequire 'coffee-mate/global'\n\t{\n\t\tNumber, String,\n\t\tBool, Any, Int, Nat, Enum, Value,\n\t\tOptional, Promise, Tree,\n\t\tMap, TreeMap, Fn,\n\t\tNamedType, Strict, Loose, Select, Choose,\n\t\tmatch, show, sample, samples, showHtml, genRenderCode, showPage,\n\t} = require './index'\n\n\tTableName = NamedType\n\t\tname: 'TableName'\n\t\tspec: String\n\t\tsamples: ['table1', 'table2']\n\tFieldName = NamedType\n\t\tname: 'FieldName'\n\t\tspec: String\n\t\tsamples: ['product_id', 'sale', 'amount']\n\tComparator = Enum ['=', '<', '<=', '>=', '>']\n\n\tWideTable = [{\n\t\ttableName: TableName\n\t\tjoin: {\n\t\t\tleftTableName: TableName\n\t\t\tleft: FieldName\n\t\t\top: Comparator\n\t\t\tright: FieldName\n\t\t}\n\t}]\n\n\tDimensionName = NamedType\n\t\tname: 'DimensionName'\n\t\tspec: String\n\t\tsamples: ['date', 'product_type', 'city']\n\tMeasureName = NamedType\n\t\tname: 'MeasureName'\n\t\tspec: String\n\t\tsamples: ['sale', 'profit', 'amount']\n\tMeasure = NamedType\n\t\tname: 'Measure'\n\t\tspec: Strict {\n\t\t\tname: MeasureName\n\t\t\taggregator: Enum ['sum', 'avg', 'max', 'min']\n\t\t}\n\tMemberName = NamedType\n\t\tname: 'MemberName'\n\t\tspec: String\n\t\tsamples: ['2013', '2014', '2015']\n\tValueExpr = NamedType\n\t\tname: 'ValueExpr'\n\t\tspec: String\n\t\tsamples: ['sum(sale)']\n\tConditionExpr = NamedType\n\t\tname: 'ConditionExpr'\n\t\tspec: String\n\t\tsamples: ['sum(sale) > 100']\n\n\tDimensionFilter = NamedType\n\t\tname: 'DimensionFilter'\n\t\tspec: Strict {\n\t\t\tselect: [MemberName]\n\t\t\tmatch: Select {\n\t\t\t\tcontains: String\n\t\t\t\tstartWith: String\n\t\t\t\tendWith: String\n\t\t\t}\n\t\t\tcondition: Select {\n\t\t\t\tlimit: Strict {\n\t\t\t\t\tmeasure: Measure\n\t\t\t\t\tcomparator: Comparator\n\t\t\t\t\tvalue: Number\n\t\t\t\t}\n\t\t\t\texpr: ConditionExpr\n\t\t\t}\n\t\t\ttop: Strict {\n\t\t\t\tcount: Number\n\t\t\t\tby: Select {\n\t\t\t\t\tmeasure: Measure\n\t\t\t\t\texpr: ValueExpr\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tInclusionCondition = NamedType\n\t\tname: 'InclusionCondition'\n\t\tspec: Strict {\n\t\t\tvia: [DimensionName]\n\t\t\tpositions: [[MemberName]]\n\t\t}\n\tExclusionCondition = NamedType\n\t\tname: 'ExclusionCondition'\n\t\tspec: Strict {\n\t\t\tvia: [DimensionName]\n\t\t\tpositions: [[MemberName]]\n\t\t}\n\tSortCondition = NamedType\n\t\tname: 'SortCondition'\n\t\tspec: Strict {\n\t\t\tasc: Bool\n\t\t\tby: Select {\n\t\t\t\tmeasure: Measure\n\t\t\t\texpr: ValueExpr\n\t\t\t}\n\t\t\twhere: Optional ConditionExpr\n\t\t}\n\tContext =\n\t\tfilter: Strict\n\t\t\tdimensions: Map(DimensionName)(DimensionFilter)\n\t\t\tmeasures: [Strict {\n\t\t\t\tmeasure: Measure\n\t\t\t\tlimit:\n\t\t\t\t\tminBound: Optional Number\n\t\t\t\t\tmaxBound: Optional Number\n\t\t\t}]\n\t\t\tinclusions: [InclusionCondition]\n\t\t\texclusions: [ExclusionCondition]\n\t\tsort: Map(DimensionName)(SortCondition)\n\n\t#contextSample =\n\t#\tfilter: {\n\t#\t\tdimensions: {\n\t#\t\t\t\"product_name\": {\n\t#\t\t\t\tselect: ['mp3', 'mp4']\n\t#\t\t\t\tmatch: { # {contains: ..} or {startWith: ..} or {endWith: ..}\n\t#\t\t\t\t\tcontains: 'abc'\n\t#\t\t\t\t\tstartWith: 'abc'\n\t#\t\t\t\t\tendWith: 'abc'\n\t#\t\t\t\t}\n\t#\t\t\t\tcondition: {# {limit: ...} or {expr: '...'}\n\t#\t\t\t\t\tlimit: {\n\t#\t\t\t\t\t\tmeasure: 'sale'\n\t#\t\t\t\t\t\taggregator: 'sum'\n\t#\t\t\t\t\t\tif: {\n\t#\t\t\t\t\t\t\tcomparator: '>'\n\t#\t\t\t\t\t\t\tvalue: 100\n\t#\t\t\t\t\t\t}\n\t#\t\t\t\t\t}\n\t#\t\t\t\t}\n\t#\t\t\t\ttop: {\n\t#\t\t\t\t\tcount: 10\n\t#\t\t\t\t\tby: {# {field: ...} or {formula: ...}\n\t#\t\t\t\t\t\tfield: {\n\t#\t\t\t\t\t\t\tmeasure: 'sale'\n\t#\t\t\t\t\t\t\taggregator: 'sum'\n\t#\t\t\t\t\t\t}\n\t#\t\t\t\t\t}\n\t#\t\t\t\t}\n\t#\t\t\t}\n\t#\t\t}\n\t#\t\tmeasures: [{\n\t#\t\t\tmeasure:\n\t#\t\t\t\tname: 'sale'\n\t#\t\t\t\taggregator: 'sum'#aggregation type. e.g. 'sum', 'avg', 'item'\n\t#\t\t\tlimit:\n\t#\t\t\t\tminBound: 10\n\t#\t\t\t\tmaxBound: 100\n\t#\t\t}]\n\t#\t\tinclusions: [\n\t#\t\t\t{\n\t#\t\t\t\tfield: ['product type', 'product name']\n\t#\t\t\t\tvalues: [\n\t#\t\t\t\t\t['electric appliance', 'mp3']\n\t#\t\t\t\t\t['electric appliance', 'mp4']\n\t#\t\t\t\t]\n\t#\t\t\t}\n\t#\t\t]\n\t#\t\texclusions: [\n\t#\t\t\t{\n\t#\t\t\t\tfield: ['product type', 'product name']\n\t#\t\t\t\tvalues: [\n\t#\t\t\t\t\t['electric appliance', 'mp3']\n\t#\t\t\t\t\t['electric appliance', 'mp4']\n\t#\t\t\t\t]\n\t#\t\t\t}\n\t#\t\t]\n\t#\t}\n\t#\tsort: {\n\t#\t\t\"product_name\": {\n\t#\t\t\tasc: true\n\t#\t\t\tby: {# {field: ...} or {formula: ...}\n\t#\t\t\t\tfield: {\n\t#\t\t\t\t\tmeasure: 'sale'\n\t#\t\t\t\t\taggregator: 'sum'\n\t#\t\t\t\t}\n\t#\t\t\t}\n\t#\t\t\twhere: ''\n\t#\t\t}\n\t#\t}\n\n\tlog -> json (sample WideTable), 4\n\tlog -> show Context\n\n\tFooSpec = NamedType\n\t\tname: 'FooSpec'\n\t\tspec: Fn(Number) Fn({x: Number, y: Number}) Promise {x: String, y: Choose [Nat, String, Value 'unavailable']}\n\t\tdesc: \"hello\"\n\t\tcheck: (x) -> x > 1\n\n\tfs = require 'fs'\n\tfs.writeFileSync('test.html', showPage WideTable)\n\n\tentries = {\n\t\ta: FooSpec\n\t\tb: WideTable\n\t\tc: Context\n\t\td: FieldName\n\t\te: Select {x: Number, y: String}\n\t\tf: Fn(Tree Int) (Loose {x: Number, y: Number})\n\t}\n\n\tfs.writeFileSync('test2.js', genRenderCode entries)\n\n"]}