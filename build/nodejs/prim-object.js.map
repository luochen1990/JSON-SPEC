{"version":3,"sources":["prim-object.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACC,WAAY,OAAA,CAAQ,aAAR,EAAZ;;EACD,MAAwD,OAAA,CAAQ,YAAR,CAAxD,EAAC,YAAA,KAAD,EAAQ,WAAA,IAAR,EAAc,cAAA,OAAd,EAAuB,aAAA,MAAvB,EAA+B,iBAAA,UAA/B,EAA2C,gBAAA;;EAC1C,eAAgB,OAAA,CAAQ,WAAR,EAAhB;;EAED,QAAA,CAAS,UAAT,CAAA,CAAqB,MAArB,CAA4B,CAAC,KAA7B,CACC;IAAA,KAAA,EAAO,SAAC,QAAD;aAAc,SAAC,CAAD;eACpB,WAAA,IAAO,CAAC,CAAC,WAAF,KAAiB,MAAxB,IAAmC,CAAC,GAAA,CAAI,SAAC,CAAD;iBAAO;QAAP,CAAJ,CAAA,CAAyB,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAzB,CAAD,CAAnC,IAAiF,GAAA,CAAI,SAAC,GAAD;AAAe,cAAA;UAAb,YAAG;iBAAU,KAAA,CAAM,IAAN,CAAA,CAAY,CAAE,CAAA,CAAA,CAAd;QAAf,CAAJ,CAAA,CAAqC,SAAA,CAAU,QAAV,CAArC;MAD7D;IAAd,CAAP;IAEA,IAAA,EAAM,SAAC,QAAD;aACL,GAAA,GAAM,CAAC,IAAA,CAAK,GAAA,CAAI,SAAC,GAAD;AAAe,YAAA;QAAb,YAAG;eAAa,CAAD,GAAG,IAAH,GAAM,CAAC,IAAA,CAAK,IAAL,CAAD;MAAvB,CAAJ,CAAA,CAAyC,SAAA,CAAU,QAAV,CAAzC,CAAL,CAAD,CAAmE,CAAC,IAApE,CAAyE,IAAzE,CAAN,GAAuF;IADlF,CAFN;IAIA,OAAA,EAAS,SAAC,QAAD;aACR,MAAA,CAAO,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,SAAC,GAAD;AAAY,YAAA;QAAV,YAAG;eAAO,CAAC,CAAD,EAAI,MAAA,CAAO,CAAP,CAAJ;MAAZ,CAAJ,CAAA,CAA+B,SAAA,CAAU,QAAV,CAA/B,CAAL,CAAL,CAAP;IADQ,CAJT;IAMA,UAAA,EAAY,SAAC,QAAD;aACX;IADW,CANZ;IAQA,SAAA,EAAW,SAAC,QAAD;aACV;QAAA,IAAA,EAAM,mCAAN;QACA,IAAA,EAAM,YAAA,CAAa,QAAb,EAAuB,YAAvB,CAAA,CAAqC,QAArC,CADN;QAEA,IAAA,EAAM,mCAFN;;IADU,CARX;GADD;AALA","file":"prim-object.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{instance} = require './typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require './typespec'\n{genBlockBody} = require './helpers'\n\ninstance('TypeSpec')(Object).where\n\tmatch: (specdict) -> (v) ->\n\t\tv? and v.constructor is Object and (all((k) -> specdict[k]?) Object.keys(v)) and all(([k, spec]) -> match(spec) v[k]) enumerate(specdict)\n\tshow: (specdict) ->\n\t\t'{' + (list map(([k, spec]) -> \"#{k}: #{show spec}\") enumerate(specdict)).join(', ') + '}'\n\tsamples: (specdict) ->\n\t\trepeat dict list map(([k, v]) -> [k, sample v]) enumerate(specdict)\n\thtmlInline: (specdict) ->\n\t\t\"<span class='type-maker'>{<span class='folded-detail'>...</span>}</span>\"\n\thtmlBlock: (specdict) ->\n\t\thead: \"<span class='type-maker'>{</span>\"\n\t\tbody: genBlockBody('object', 'field-name') specdict\n\t\ttail: \"<span class='type-maker'>}</span>\"\n\n"]}