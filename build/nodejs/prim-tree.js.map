{"version":3,"sources":["prim-tree.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACA,MAAwB,OAAA,CAAQ,aAAR,CAAxB,EAAC,gBAAA,SAAD,EAAY,eAAA;;EACZ,OAAwD,OAAA,CAAQ,YAAR,CAAxD,EAAC,aAAA,KAAD,EAAQ,YAAA,IAAR,EAAc,eAAA,OAAd,EAAuB,cAAA,MAAvB,EAA+B,kBAAA,UAA/B,EAA2C,iBAAA;;EAC1C,kBAAmB,OAAA,CAAQ,WAAR,EAAnB;;EAEK;IACQ,cAAC,SAAD;MACZ,MAAA,CAAO,SAAA;eAAG,SAAA,CAAU,UAAV,CAAqB,CAAC,WAAtB,CAAkC,SAAS,CAAC,WAA5C;MAAH,CAAP;AACA,aAAO;QACN,WAAA,EAAa,IADP;QAEN,SAAA,EAAW,SAFL;;IAFK;;;;;;EAOd,QAAA,CAAS,UAAT,CAAA,CAAqB,IAArB,CAA0B,CAAC,KAA3B,CACC;IAAA,KAAA,EAAO,SAAC,CAAD;aAAO,SAAC,CAAD;AACb,YAAA;QAAC,YAAa,EAAb;QACD,EAAA,GAAK,KAAA,CAAM,SAAN;eACL,WAAA,IAAO,OAAO,CAAP,KAAY,QAAnB,IAAgC,EAAA,CAAG,CAAC,CAAC,SAAL,CAAhC,IAAoD,GAAA,CAAI,EAAJ,CAAA,CAAQ,GAAA,CAAI,KAAA,CAAM,WAAN,CAAJ,CAAA,CAAuB,CAAC,CAAC,SAAzB,CAAR;MAHvC;IAAP,CAAP;IAIA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,YAAD,IAAC;aACP,OAAA,GAAO,CAAC,IAAA,CAAK,SAAL,CAAD;IADF,CAJN;IAMA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,YAAD,IAAC;MACV,EAAA,GAAK,IAAA,CAAK,IAAA,CAAK,CAAL,CAAA,CAAQ,OAAA,CAAQ,SAAR,CAAR,CAAL;MACL,EAAA,GAAK;QAAC,SAAA,EAAW,EAAG,CAAA,CAAA,CAAf;QAAmB,SAAA,EAAW,EAA9B;;MACL,EAAA,GAAK;QAAC,SAAA,EAAW,EAAG,CAAA,CAAA,CAAf;QAAmB,SAAA,EAAW,CAAC,EAAD,CAA9B;;aACL,MAAA,CAAO,MAAA,CAAO,CAAC,EAAD,EAAK,EAAL,CAAP,CAAP;IAJQ,CANT;IAWA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,YAAD,IAAC;aACb,0CAAA,GAA0C,CAAC,UAAA,CAAW,SAAX,CAAD,CAA1C,GAAgE;IADrD,CAXZ;IAaA,SAAA,EAAW,SAAC,GAAD;AACV,UAAA;MADY,YAAD,IAAC;aACZ,eAAA,CAAgB,SAAC,IAAD;eACf,gCAAA,GAAiC,IAAjC,GAAsC;MADvB,CAAhB,CAAA,CAEE,SAFF;IADU,CAbX;GADD;;EAmBA,MAAM,CAAC,OAAP,GAAiB;IAAC,MAAA,IAAD;;AAhCjB","file":"prim-tree.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require './typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require './typespec'\n{expandBlockHead} = require './helpers'\n\nclass Tree\n\tconstructor: (labelSpec) ->\n\t\tassert -> typeclass('TypeSpec').hasInstance(labelSpec.constructor)\n\t\treturn {\n\t\t\tconstructor: Tree\n\t\t\tlabelSpec: labelSpec\n\t\t}\n\ninstance('TypeSpec')(Tree).where\n\tmatch: (t) -> (v) ->\n\t\t{labelSpec} = t\n\t\tml = match(labelSpec)\n\t\tv? and typeof v is 'object' and ml(v.rootLabel) and all(ml)(map(pluck 'rootLabel') v.subForest)\n\tshow: ({labelSpec}) ->\n\t\t\"Tree #{show labelSpec}\"\n\tsamples: ({labelSpec}) ->\n\t\tls = list take(2) samples labelSpec\n\t\ts0 = {rootLabel: ls[0], subForest: []}\n\t\ts1 = {rootLabel: ls[1], subForest: [s0]}\n\t\tconcat repeat [s0, s1]\n\thtmlInline: ({labelSpec}) ->\n\t\t\"<span class='type-maker unwrapped'>Tree #{htmlInline labelSpec}</span>\"\n\thtmlBlock: ({labelSpec}) ->\n\t\texpandBlockHead((head) ->\n\t\t\t\"<span class='type-maker'>Tree #{head}</span>\"\n\t\t) labelSpec\n\nmodule.exports = {Tree}\n"]}