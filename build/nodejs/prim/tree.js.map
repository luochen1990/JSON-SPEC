{"version":3,"sources":["prim/tree.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACA,MAAwB,OAAA,CAAQ,cAAR,CAAxB,EAAC,gBAAA,SAAD,EAAY,eAAA;;EACZ,OAAwD,OAAA,CAAQ,aAAR,CAAxD,EAAC,aAAA,KAAD,EAAQ,YAAA,IAAR,EAAc,eAAA,OAAd,EAAuB,cAAA,MAAvB,EAA+B,kBAAA,UAA/B,EAA2C,iBAAA;;EAC3C,OAAgC,OAAA,CAAQ,YAAR,CAAhC,EAAC,uBAAA,eAAD,EAAkB,kBAAA;;EAEZ;IACQ,cAAC,SAAD;MACZ,IAAA,CAAO,UAAA,CAAW,SAAX,CAAP;AACC,cAAM,KAAA,CAAM,0DAAN,EADP;;AAGA,aAAO;QACN,WAAA,EAAa,IADP;QAEN,SAAA,EAAW,SAFL;;IAJK;;;;;;EASd,QAAA,CAAS,UAAT,CAAA,CAAqB,IAArB,CAA0B,CAAC,KAA3B,CACC;IAAA,KAAA,EAAO,SAAC,CAAD;aAAO,SAAC,CAAD;AACb,YAAA;QAAC,YAAa,EAAb;eACD,WAAA,IAAO,OAAO,CAAP,KAAY,QAAnB,IAAgC,qBAAhC,wCAA4D,CAAE,qBAAb,KAA4B,KAA7E,IAAuF,KAAA,CAAM,SAAN,CAAA,CAAiB,CAAC,CAAC,SAAnB,CAAvF,IAAyH,GAAA,CAAI,KAAA,CAAM,CAAN,CAAJ,CAAA,CAAc,CAAC,CAAC,SAAhB;MAF5G;IAAP,CAAP;IAGA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,YAAD,IAAC;aACP,OAAA,GAAO,CAAC,IAAA,CAAK,SAAL,CAAD;IADF,CAHN;IAKA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,YAAD,IAAC;MACV,EAAA,GAAK,IAAA,CAAK,IAAA,CAAK,CAAL,CAAA,CAAQ,OAAA,CAAQ,SAAR,CAAR,CAAL;MACL,EAAA,GAAK;QAAC,SAAA,EAAW,EAAG,CAAA,CAAA,CAAf;QAAmB,SAAA,EAAW,EAA9B;;MACL,EAAA,GAAK;QAAC,SAAA,EAAW,EAAG,CAAA,CAAA,CAAf;QAAmB,SAAA,EAAW,CAAC,EAAD,CAA9B;;aACL,MAAA,CAAO,MAAA,CAAO,CAAC,EAAD,EAAK,EAAL,CAAP,CAAP;IAJQ,CALT;IAUA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,YAAD,IAAC;aACb,0CAAA,GAA0C,CAAC,UAAA,CAAW,SAAX,CAAD,CAA1C,GAAgE;IADrD,CAVZ;IAYA,SAAA,EAAW,SAAC,GAAD;AACV,UAAA;MADY,YAAD,IAAC;aACZ,eAAA,CAAgB,SAAC,IAAD;eACf,gCAAA,GAAiC,IAAjC,GAAsC;MADvB,CAAhB,CAAA,CAEE,SAFF;IADU,CAZX;GADD;;EAkBA,MAAM,CAAC,OAAP,GAAiB;IAAC,MAAA,IAAD;;AAjCjB","file":"prim/tree.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require '../typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require '../typespec'\n{expandBlockHead, isTypeSpec} = require '../helpers'\n\nclass Tree\n\tconstructor: (labelSpec) ->\n\t\tunless isTypeSpec(labelSpec)\n\t\t\tthrow Error \"Bad Tree Type Definition: TypeSpec as labelSpec Expected\"\n\n\t\treturn {\n\t\t\tconstructor: Tree\n\t\t\tlabelSpec: labelSpec\n\t\t}\n\ninstance('TypeSpec')(Tree).where\n\tmatch: (t) -> (v) ->\n\t\t{labelSpec} = t\n\t\tv? and typeof v is 'object' and v.rootLabel? and v.subForest?.constructor is Array and match(labelSpec)(v.rootLabel) and all(match(t))(v.subForest)\n\tshow: ({labelSpec}) ->\n\t\t\"Tree #{show labelSpec}\"\n\tsamples: ({labelSpec}) ->\n\t\tls = list take(2) samples labelSpec\n\t\ts0 = {rootLabel: ls[0], subForest: []}\n\t\ts1 = {rootLabel: ls[1], subForest: [s0]}\n\t\tconcat repeat [s0, s1]\n\thtmlInline: ({labelSpec}) ->\n\t\t\"<span class='type-maker unwrapped'>Tree #{htmlInline labelSpec}</span>\"\n\thtmlBlock: ({labelSpec}) ->\n\t\texpandBlockHead((head) ->\n\t\t\t\"<span class='type-maker'>Tree #{head}</span>\"\n\t\t) labelSpec\n\nmodule.exports = {Tree}\n"]}