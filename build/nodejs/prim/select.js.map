{"version":3,"sources":["prim/select.coffee"],"names":[],"mappings":"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","file":"prim/select.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require '../typeclass'\n{match, constraints, show, samples, sample, htmlInline, htmlBlock} = require '../typespec'\n{genBlockBody, isTypeSpecDict} = require '../helpers'\n\nclass Select\n\tconstructor: (specs) ->\n\t\tunless isTypeSpecDict(specs)\n\t\t\tthrow Error \"Bad Select Type Definition: TypeSpec as spec Expected\"\n\t\tunless Object.keys(specs).length >= 1\n\t\t\tthrow Error \"Bad Select Type Definition: At Least One Selection Should Be Provided\"\n\n\t\treturn {\n\t\t\tconstructor: Select\n\t\t\tspecs: specs\n\t\t}\n\ninstance('TypeSpec')(Select).where\n\tmatch: ({specs}) -> (v) ->\n\t\tv? and (ks = Object.keys(v)).length is 1 and (spec = specs[(k = ks[0])])? and (match(spec) v[k])\n\tconstraints: ({specs}) -> (v) -> [\n\t\t{\n\t\t\tlabel: -> \"Object Expected, But Got #{v}\"\n\t\t\tflag: -> v?\n\t\t}\n\t\t{\n\t\t\tlabel: -> \"Selection Between #{Object.keys(specs).join(',')} Expected, But Got #{Object.keys(v).join(',')} Via #{json v}\"\n\t\t\tflag: -> (ks = Object.keys(v)).length is 1 and (spec = specs[(k = ks[0])])?\n\t\t}\n\t\t{\n\t\t\tlabel: -> \"Selection Field #{k = Object.keys(v)[0]} Expected to be #{show specs[k]}\" #, But Got #{json v}\"\n\t\t\tsub: -> constraints(specs[k = Object.keys(v)[0]])(v[k])\n\t\t}\n\t]\n\tshow: ({specs}) ->\n\t\t\"Select({#{(list map(([k, spec]) -> \"#{k}: #{show spec}\") enumerate(specs)).join(', ')}})\"\n\tsamples: ({specs}) ->\n\t\tconcat repeat map(([k, v]) -> dict [[k, sample v]]) enumerate(specs)\n\thtmlInline: ({specs: specdict}) ->\n\t\t\"<span class='type-maker unwrapped'>Select {<span class='folded-detail'>...</span>}</span>\"\n\thtmlBlock: ({specs: specdict}) ->\n\t\thead: \"<span class='type-maker'>Select {</span>\"\n\t\tbody: genBlockBody('select', 'field-name') specdict\n\t\ttail: \"<span class='type-maker'>}</span>\"\n\nmodule.exports = {Select}\n"]}