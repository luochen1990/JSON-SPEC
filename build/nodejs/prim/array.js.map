{"version":3,"sources":["prim/array.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACC,WAAY,OAAA,CAAQ,cAAR,EAAZ;;EACD,MAA4E,OAAA,CAAQ,aAAR,CAA5E,EAAC,YAAA,KAAD,EAAQ,YAAA,KAAR,EAAe,kBAAA,WAAf,EAA4B,WAAA,IAA5B,EAAkC,cAAA,OAAlC,EAA2C,aAAA,MAA3C,EAAmD,iBAAA,UAAnD,EAA+D,gBAAA;;EAE/D,QAAA,CAAS,UAAT,CAAA,CAAqB,KAArB,CAA2B,CAAC,KAA5B,CACC;IAAA,KAAA,EAAO,SAAC,GAAD;AAAY,UAAA;MAAV,OAAD;aAAW;IAAZ,CAAP;IACA,KAAA,EAAO,SAAC,GAAD;AAAY,UAAA;MAAV,OAAD;aAAW,SAAC,CAAD;eAClB,WAAA,IAAO,CAAA,YAAa,KAApB,IAA8B,CAAC,GAAA,CAAI,KAAA,CAAM,IAAN,CAAJ,CAAA,CAAgB,CAAhB,CAAD;MADZ;IAAZ,CADP;IAGA,WAAA,EAAa,SAAC,GAAD;AAAY,UAAA;MAAV,OAAD;aAAW,SAAC,CAAD;eAAO,IAAA,CAC/B;UACC,KAAA,EAAO,SAAA;mBAAG,0BAAA,GAA2B;UAA9B,CADR;UAEC,IAAA,EAAM,SAAA;mBAAG,WAAA,IAAO,CAAA,YAAa;UAAvB,CAFP;SAD+B,CAAA,CAM/B,GAAA,CAAI,SAAC,IAAD;AACH,cAAA;UADK,aAAG;iBACR;YACC,KAAA,EAAO,SAAA;qBAAG,UAAA,GAAW;YAAd,CADR;YAEC,GAAA,EAAK,SAAA;qBAAG,WAAA,CAAY,IAAZ,CAAA,CAAkB,CAAlB;YAAH,CAFN;;QADG,CAAJ,CAAA,CAKE,SAAA,aAAU,IAAI,EAAd,CALF,CAN+B;MAAP;IAAZ,CAHb;IAgBA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,OAAD;aACN,GAAA,GAAG,CAAC,IAAA,CAAK,IAAL,CAAD,CAAH,GAAc;IADT,CAhBN;IAkBA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,OAAD;aACT,MAAA,CAAO,MAAA,CAAO,OAAA,CAAQ,GAAA,CAAI,SAAC,CAAD;eAAO,IAAA,CAAK,IAAA,CAAK,CAAL,CAAA,CAAQ,OAAA,CAAQ,IAAR,CAAR,CAAL;MAAP,CAAJ,CAAA,CAAsC,KAAA,CAAM,CAAN,CAAtC,CAAR,CAAP,CAAP;IADQ,CAlBT;IAoBA,MAAA,EAAQ,SAAC,GAAD;AACP,UAAA;MADS,OAAD;aACR,CAAC,MAAA,CAAO,IAAP,CAAD;IADO,CApBR;IAsBA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,OAAD;aACZ,4BAAA,GAA4B,CAAC,UAAA,CAAW,IAAX,CAAD,CAA5B,GAA6C;IADlC,CAtBZ;IAwBA,SAAA,EAAW,SAAC,GAAD;AACV,UAAA;MADY,OAAD;MACX,IAAO,gCAAP;eACC,KADD;OAAA,MAAA;eAGC;UAAA,IAAA,EAAM,4BAAA,GAA6B,IAAI,CAAC,IAAlC,GAAuC,SAA7C;UACA,IAAA,EAAM,IAAI,CAAC,IADX;UAEA,IAAA,EAAM,2BAAA,GAA2B,qCAAa,EAAb,CAA3B,GAA2C,UAFjD;UAHD;;IADU,CAxBX;GADD;AAJA","file":"prim/array.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{instance} = require '../typeclass'\n{shape, match, constraints, show, samples, sample, htmlInline, htmlBlock} = require '../typespec'\n\ninstance('TypeSpec')(Array).where\n\tshape: ([spec]) -> Array\n\tmatch: ([spec]) -> (v) ->\n\t\tv? and v instanceof Array and (all(match spec) v)\n\tconstraints: ([spec]) -> (v) -> cons(\n\t\t{\n\t\t\tlabel: -> \"Array Expected, But Got #{v}\"\n\t\t\tflag: -> v? and v instanceof Array\n\t\t}\n\t)(\n\t\tmap(([i, x]) ->\n\t\t\t{\n\t\t\t\tlabel: -> \"Element #{i}\" # Expected to be #{show spec}\" #, But Got #{json v}\"\n\t\t\t\tsub: -> constraints(spec)(x)\n\t\t\t}\n\t\t) enumerate(v ? [])\n\t)\n\tshow: ([spec]) ->\n\t\t\"[#{show spec}]\"\n\tsamples: ([spec]) ->\n\t\tconcat repeat reverse map((n) -> list take(n) samples spec) range(3)\n\tsample: ([spec]) ->\n\t\t[sample spec]\n\thtmlInline: ([spec]) ->\n\t\t\"<span class='type-maker'>[#{htmlInline spec}]</span>\"\n\thtmlBlock: ([spec]) ->\n\t\tif not (node = htmlBlock spec)?\n\t\t\tnull\n\t\telse\n\t\t\thead: \"<span class='type-maker'>[#{node.head}</span>\"\n\t\t\tbody: node.body\n\t\t\ttail: \"<span class='type-maker'>#{node.tail ? ''}]</span>\"\n\n"]}