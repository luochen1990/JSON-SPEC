{"version":3,"sources":["prim/optional.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACA,MAAwB,OAAA,CAAQ,cAAR,CAAxB,EAAC,gBAAA,SAAD,EAAY,eAAA;;EACZ,OAAwD,OAAA,CAAQ,aAAR,CAAxD,EAAC,aAAA,KAAD,EAAQ,YAAA,IAAR,EAAc,eAAA,OAAd,EAAuB,cAAA,MAAvB,EAA+B,kBAAA,UAA/B,EAA2C,iBAAA;;EAC3C,OAAgC,OAAA,CAAQ,YAAR,CAAhC,EAAC,uBAAA,eAAD,EAAkB,kBAAA;;EAEZ;IACQ,kBAAC,IAAD;MACZ,IAAA,CAAO,UAAA,CAAW,IAAX,CAAP;AACC,cAAM,KAAA,CAAM,yDAAN,EADP;;AAGA,aAAO;QACN,WAAA,EAAa,QADP;QAEN,IAAA,EAAM,IAFA;;IAJK;;;;;;EASd,QAAA,CAAS,UAAT,CAAA,CAAqB,QAArB,CAA8B,CAAC,KAA/B,CACC;IAAA,KAAA,EAAO,SAAC,GAAD;AAAY,UAAA;MAAV,OAAD,IAAC;aAAU,SAAC,CAAD;eACd,WAAJ,IAAU,KAAA,CAAM,IAAN,CAAA,CAAY,CAAZ;MADQ;IAAZ,CAAP;IAEA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,OAAD,IAAC;aACP,WAAA,GAAW,CAAC,IAAA,CAAK,IAAL,CAAD;IADN,CAFN;IAIA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,OAAD,IAAC;MACV,EAAA,GAAK,IAAA,CAAK,IAAA,CAAK,CAAL,CAAA,CAAQ,OAAA,CAAQ,IAAR,CAAR,CAAL;aACL,MAAA,CAAO,MAAA,CAAO,CAAC,EAAG,CAAA,CAAA,CAAJ,EAAQ,IAAR,EAAc,EAAG,CAAA,CAAA,CAAjB,EAAqB,MAArB,CAAP,CAAP;IAFQ,CAJT;IAOA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,OAAD,IAAC;aACb,8CAAA,GAA8C,CAAC,UAAA,CAAW,IAAX,CAAD,CAA9C,GAA+D;IADpD,CAPZ;IASA,SAAA,EAAW,SAAC,GAAD;AACV,UAAA;MADY,OAAD,IAAC;aACZ,eAAA,CAAgB,SAAC,IAAD;eACf,oCAAA,GAAqC,IAArC,GAA0C;MAD3B,CAAhB,CAAA,CAEE,IAFF;IADU,CATX;GADD;;EAeA,MAAM,CAAC,OAAP,GAAiB;IAAC,UAAA,QAAD;;AA9BjB","file":"prim/optional.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{typeclass, instance} = require '../typeclass'\n{match, show, samples, sample, htmlInline, htmlBlock} = require '../typespec'\n{expandBlockHead, isTypeSpec} = require '../helpers'\n\nclass Optional\n\tconstructor: (spec) ->\n\t\tunless isTypeSpec(spec)\n\t\t\tthrow Error \"Bad Optional Type Definition: TypeSpec as spec Expected\"\n\n\t\treturn {\n\t\t\tconstructor: Optional\n\t\t\tspec: spec\n\t\t}\n\ninstance('TypeSpec')(Optional).where\n\tmatch: ({spec}) -> (v) ->\n\t\tnot v? or match(spec) v\n\tshow: ({spec}) ->\n\t\t\"Optional #{show spec}\"\n\tsamples: ({spec}) ->\n\t\tls = list take(2) samples spec\n\t\tconcat repeat [ls[0], null, ls[1], undefined]\n\thtmlInline: ({spec}) ->\n\t\t\"<span class='type-maker unwrapped'>Optional #{htmlInline spec}</span>\"\n\thtmlBlock: ({spec}) ->\n\t\texpandBlockHead((head) ->\n\t\t\t\"<span class='type-maker'>Optional #{head}</span>\"\n\t\t) spec\n\nmodule.exports = {Optional}\n"]}