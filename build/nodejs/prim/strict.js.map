{"version":3,"sources":["prim/strict.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,OAAA,CAAQ,oBAAR;;EACC,WAAY,OAAA,CAAQ,cAAR,EAAZ;;EACD,MAAqE,OAAA,CAAQ,aAAR,CAArE,EAAC,YAAA,KAAD,EAAQ,kBAAA,WAAR,EAAqB,WAAA,IAArB,EAA2B,cAAA,OAA3B,EAAoC,aAAA,MAApC,EAA4C,iBAAA,UAA5C,EAAwD,gBAAA;;EACxD,OAAiC,OAAA,CAAQ,YAAR,CAAjC,EAAC,oBAAA,YAAD,EAAe,sBAAA;;EAET;IACQ,gBAAC,QAAD;MACZ,IAAA,CAAO,cAAA,CAAe,QAAf,CAAP;AACC,cAAM,KAAA,CAAM,iEAAA,GAAkE,QAAxE,EADP;;AAEA,aAAO;QACN,WAAA,EAAa,MADP;QAEN,QAAA,EAAU,QAFJ;;IAHK;;;;;;EAQd,QAAA,CAAS,UAAT,CAAA,CAAqB,MAArB,CAA4B,CAAC,KAA7B,CACC;IAAA,KAAA,EAAO,SAAC,GAAD;AAAgB,UAAA;MAAd,WAAD,IAAC;aAAc,SAAC,CAAD;eACtB,WAAA,IAAO,CAAC,CAAC,WAAF,KAAiB,MAAxB,IAAmC,CAAC,GAAA,CAAI,SAAC,CAAD;iBAAO;QAAP,CAAJ,CAAA,CAAyB,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAzB,CAAD,CAAnC,IAAiF,GAAA,CAAI,SAAC,IAAD;AAAe,cAAA;UAAb,aAAG;iBAAU,KAAA,CAAM,IAAN,CAAA,CAAY,CAAE,CAAA,CAAA,CAAd;QAAf,CAAJ,CAAA,CAAqC,SAAA,CAAU,QAAV,CAArC;MAD3D;IAAhB,CAAP;IAEA,WAAA,EAAa,SAAC,GAAD;AAAgB,UAAA;MAAd,WAAD,IAAC;aAAc,SAAC,CAAD;eAAO,IAAA,CACnC;UACC,KAAA,EAAO,SAAA;mBAAG,2BAAA,GAA4B;UAA/B,CADR;UAEC,IAAA,EAAM,SAAA;mBAAG;UAAH,CAFP;SADmC,CAAA,CAKlC,IAAA,CACD;UACC,KAAA,EAAO,SAAA;mBAAG,kBAAA,GAAkB,CAAC,IAAA,CAAK,MAAA,CAAO,SAAC,CAAD;qBAAW;YAAX,CAAP,CAAA,CAAgC,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAhC,CAAL,CAAD;UAArB,CADR;UAEC,IAAA,EAAM,SAAA;mBAAG,GAAA,CAAI,SAAC,CAAD;qBAAO;YAAP,CAAJ,CAAA,CAAyB,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAzB;UAAH,CAFP;SADC,CAAA,CAMD,GAAA,CAAI,SAAC,IAAD;AACH,cAAA;UADK,aAAG;iBACR;YACC,KAAA,EAAO,SAAA;qBAAG,QAAA,GAAS,CAAT,GAAW,kBAAX,GAA4B,CAAC,IAAA,CAAK,IAAL,CAAD;YAA/B,CADR;YAEC,GAAA,EAAK,SAAA;qBAAG,WAAA,CAAY,IAAZ,CAAA,CAAkB,CAAE,CAAA,CAAA,CAApB;YAAH,CAFN;;QADG,CAAJ,CAAA,CAKE,SAAA,CAAU,QAAV,CALF,CANC,CALkC;MAAP;IAAhB,CAFb;IAoBA,IAAA,EAAM,SAAC,GAAD;AACL,UAAA;MADO,WAAD,IAAC;aACP,GAAA,GAAG,CAAC,CAAC,IAAA,CAAK,GAAA,CAAI,SAAC,IAAD;AAAe,YAAA;QAAb,aAAG;eAAa,CAAD,GAAG,IAAH,GAAM,CAAC,IAAA,CAAK,IAAL,CAAD;MAAvB,CAAJ,CAAA,CAAyC,SAAA,CAAU,QAAV,CAAzC,CAAL,CAAD,CAAmE,CAAC,IAApE,CAAyE,IAAzE,CAAD,CAAH,GAAmF;IAD9E,CApBN;IAsBA,OAAA,EAAS,SAAC,GAAD;AACR,UAAA;MADU,WAAD,IAAC;aACV,MAAA,CAAO,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,SAAC,IAAD;AAAY,YAAA;QAAV,aAAG;eAAO,CAAC,CAAD,EAAI,MAAA,CAAO,CAAP,CAAJ;MAAZ,CAAJ,CAAA,CAA+B,SAAA,CAAU,QAAV,CAA/B,CAAL,CAAL,CAAP;IADQ,CAtBT;IAwBA,UAAA,EAAY,SAAC,GAAD;AACX,UAAA;MADa,WAAD,IAAC;aACb;IADW,CAxBZ;IA0BA,SAAA,EAAW,SAAC,GAAD;AACV,UAAA;MADY,WAAD,IAAC;aACZ;QAAA,IAAA,EAAM,mCAAN;QACA,IAAA,EAAM,YAAA,CAAa,QAAb,EAAuB,YAAvB,CAAA,CAAqC,QAArC,CADN;QAEA,IAAA,EAAM,mCAFN;;IADU,CA1BX;GADD;;EAgCA,MAAM,CAAC,OAAP,GAAiB;IAAC,QAAA,MAAD;;AA9CjB","file":"prim/strict.js","sourceRoot":"/source/","sourcesContent":["require 'coffee-mate/global'\n{instance} = require '../typeclass'\n{match, constraints, show, samples, sample, htmlInline, htmlBlock} = require '../typespec'\n{genBlockBody, isTypeSpecDict} = require '../helpers'\n\nclass Strict\n\tconstructor: (specdict) ->\n\t\tunless isTypeSpecDict(specdict)\n\t\t\tthrow Error \"Bad Strict Type Definition: Dict Of TypeSpec Expected, But Got #{specdict}\"\n\t\treturn {\n\t\t\tconstructor: Strict\n\t\t\tspecdict: specdict\n\t\t}\n\ninstance('TypeSpec')(Strict).where\n\tmatch: ({specdict}) -> (v) ->\n\t\tv? and v.constructor is Object and (all((k) -> specdict[k]?) Object.keys(v)) and all(([k, spec]) -> match(spec) v[k]) enumerate(specdict)\n\tconstraints: ({specdict}) -> (v) -> cons(\n\t\t{\n\t\t\tlabel: -> \"Object Expected, But Got #{v}\"\n\t\t\tflag: -> v?\n\t\t}\n\t) cons(\n\t\t{\n\t\t\tlabel: -> \"Redundant Keys: #{list filter((k) -> not specdict[k]?) Object.keys(v)}\"\n\t\t\tflag: -> all((k) -> specdict[k]?) Object.keys(v)\n\t\t}\n\t)(\n\t\tmap(([k, spec]) ->\n\t\t\t{\n\t\t\t\tlabel: -> \"Field #{k} Expected to be #{show spec}\" #, But Got #{json v}\"\n\t\t\t\tsub: -> constraints(spec)(v[k])\n\t\t\t}\n\t\t) enumerate(specdict)\n\t)\n\tshow: ({specdict}) ->\n\t\t\"{#{(list map(([k, spec]) -> \"#{k}: #{show spec}\") enumerate(specdict)).join(', ')}})\"\n\tsamples: ({specdict}) ->\n\t\trepeat dict list map(([k, v]) -> [k, sample v]) enumerate(specdict)\n\thtmlInline: ({specdict}) ->\n\t\t\"<span class='type-maker'>{<span class='folded-detail'>...</span>}</span>\"\n\thtmlBlock: ({specdict}) ->\n\t\thead: \"<span class='type-maker'>{</span>\"\n\t\tbody: genBlockBody('strict', 'field-name') specdict\n\t\ttail: \"<span class='type-maker'>}</span>\"\n\nmodule.exports = {Strict}\n"]}